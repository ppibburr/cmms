#!/usr/bin/env ruby
$: << File.expand_path(File.join(File.dirname(__FILE__),'..','lib'))
$: << File.expand_path(File.join(File.dirname(__FILE__),'..', '..', 'render','lib'))

require 'sinatra'
require 'render'
require 'web/request'
require 'web/push'

def routes &b
  $routes[site=File.basename(File.dirname(caller[0].split(":")[0]))] = b  
end

Dir.glob('./sites/*/site.rb').each do |f|
  require f
end

get "/" do
  render!(:page,"main", site: nil, request: request)  
end

get "/manifest.json" do
  send_file "./public/manifest.json"
end

get "/:site/manifest.json" do
  send_file "./public/manifest.json"
end

get "/:site/?" do
    unless File.exist?("./pages/#{params[:site]}.rb")
      next render!(:page,"main", site: params[:site], request: request)
    end

    render!(:page,params[:site], site: nil, request: request)
end

get "/:site/:page/?" do
  render!(:page,params[:page], site: params[:site], request: request)
end

post "/:site/:page/render/:view/?" do
    render!(:view,params[:view], site: params[:site], request: request)  
end

class Sinatra::Application
  def render! type, q, site: nil, request: {}, &b
    send_file "./public/service-worker.js" if request.fullpath == "/service-worker.js"
    send_file "./public/manifest.json" if request.fullpath == "/manifest.json"
    
    if File.exist?(path="/public"+request.fullpath) && !File.directory?(path)
      send_file(path)
    else
      __send__(type, q, site: site, request: request, &b).to_s
    end
  end
end

post "/:site/:page/:view/render/?" do
  render!(:view,params[:view], site: params[:site], request: request).render(JSON.parse(request.body.read)).to_s
end

if true
  Push.routes self
end

class Store
  def self.routes ins
    ins.instance_eval do
      get "/:site/api/:thing" do DB[thing].find.to_a().map do end end
      get "/:site/api/:thing/:id" do DB[thing].find(params[:id]).to_a[0] end
      post "/:site/api/:thing" do end
      
      put "/:site/api/:thing" do
        DB[thing].find(JSON.parse(request.body.read)).to_a.map do |r|
        
        end.to_json      
      end
      
      put "/:site/api/:thing/:id" do
        
      end
      
      delete "/:site/api/:thing/:id" do
      
      end
      
      delete "/:site/api/:thing" do
        DB[thing].find(JSON.parse(request.body.read)).to_a.map do |r|
        
        end.to_json      
      end      
      
      get "/:site/api/:thing/find" do
        DB[thing].find(JSON.parse(request.body.read)).to_a.map do |r|
        
        end.to_json
      end
    end
  end
end

DB.routes self
